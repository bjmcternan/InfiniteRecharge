// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.commands;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.CommandBase;
import frc.robot.classes.SmoothControl;
import frc.robot.subsystems.BallPickup;
import frc.robot.subsystems.Drivetrain;
import frc.robot.subsystems.Feeder;
import frc.robot.subsystems.Launcher;

import static frc.robot.Constants.DrivetrainConstants.*;

import java.util.*;

import static frc.robot.Constants.AutonomousCommandConstants.*;

import frc.robot.classes.AutonomousDisableBallPickup;
import frc.robot.classes.AutonomousDisableLauncher;
import frc.robot.classes.AutonomousEnableBallPickup;
import frc.robot.classes.AutonomousEnableLauncher;
import frc.robot.classes.AutonomousMoveTo;
import frc.robot.classes.AutonomousStopDrivetrain;
import frc.robot.classes.AutonomousWait;
import frc.robot.classes.Position2D;
import frc.robot.classes.SPIKE293AutonomousCommand;
import frc.robot.classes.SPIKE293Utils;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class AutonomousCommand extends CommandBase 
{
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    public enum AutoStartPosition
    {
        LEFT,
        MIDDLE,
        RIGHT
    }

    private boolean m_isDone = false;
    private SmoothControl m_smoothControl;
    private Drivetrain m_drivetrain;
    private BallPickup m_ballPickup;
    private Launcher m_launcher;

    private AutoStartPosition m_startPosition;

    private int m_commandIndex = 0;
    private List<SPIKE293AutonomousCommand> m_commands = new ArrayList<>();

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    public AutonomousCommand(Drivetrain drivetrain, AutoStartPosition startPosition, Feeder feeder, Launcher launcher, BallPickup ballPickup) 
    {
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        m_ballPickup = ballPickup;
        m_launcher = launcher;
        m_drivetrain = drivetrain;
        m_startPosition = startPosition;
        
        addRequirements(m_drivetrain);
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() 
    {
        //Setting paths 
        switch (m_startPosition) 
        {
            case LEFT:
                //Straight line path for left side
                m_commands.add(new AutonomousEnableBallPickup(m_ballPickup));
                m_commands.add(new AutonomousMoveTo(m_drivetrain, m_smoothControl, new Position2D(6, 0, Math.toRadians(0)), 1.0d, true));
                m_commands.add(new AutonomousStopDrivetrain(m_drivetrain));
                break;
            case MIDDLE:
                //Straight line path for middle
                m_commands.add(new AutonomousMoveTo(m_drivetrain, m_smoothControl, new Position2D(4, 0, Math.toRadians(0)), 1.0d, true));
                m_commands.add(new AutonomousStopDrivetrain(m_drivetrain));
                break;
            case RIGHT:
                //Straight line path for middle
                m_commands.add(new AutonomousEnableLauncher(m_launcher));     //Start the launcher
                m_commands.add(new AutonomousWait(3.0d));                     //Wait for 3 seconds for all balls to launch
                m_commands.add(new AutonomousDisableLauncher(m_launcher));    //Turn off the launcher
                m_commands.add(new AutonomousEnableBallPickup(m_ballPickup)); //Turn on the gecko and lower it to the floor
                m_commands.add(new AutonomousMoveTo(m_drivetrain, m_smoothControl, new Position2D(20.0d, 0.0d, Math.toRadians(0)), 1.0d, true));
                m_commands.add(new AutonomousDisableBallPickup(m_ballPickup)); //Turn off the gecko and raise it
                m_commands.add(new AutonomousMoveTo(m_drivetrain, m_smoothControl, new Position2D(0.0d, 0.0d, Math.toRadians(180)), -1.0d, false));
                m_commands.add(new AutonomousStopDrivetrain(m_drivetrain));
                m_commands.add(new AutonomousEnableLauncher(m_launcher));     //Start the launcher
                m_commands.add(new AutonomousWait(3.0d));                     //Wait for 3 seconds for all balls to launch
                m_commands.add(new AutonomousDisableLauncher(m_launcher));    //Turn off the launcher
                break;
            default:
                break;
        }
    }
    
    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() 
    {   
        SPIKE293AutonomousCommand currentCommand;
        if(0 == m_commands.size())
        {
            System.out.println("Invalid command size. Is initialization correct? " + m_commands.size());
        }
        else
        {   
            //Get the current command
            currentCommand = m_commands.get(m_commandIndex);

            //Execute the current command
            currentCommand.execute();

            //Check if command is complete
            if(true == currentCommand.isDone())
            {
                m_commandIndex++;

                //Have we reached the end of the list?
                if(m_commandIndex >= m_commands.size())
                {
                    System.out.println("Reached end of last command. Autonomous done.");
                    SmartDashboard.putBoolean("AutoDone", true);
                    m_drivetrain.stop(); //Stop drivetrain
                    m_isDone = true;     //Set done
                }
            }
        }
    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) 
    {
        m_drivetrain.stop();
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() 
    {
        return m_isDone;
    }

    @Override
    public boolean runsWhenDisabled() 
    {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }
}
